class PStorage{constructor(t,e={prefix:""}){this.version=t,this.options=e}read(t,e){const r=GM_getValue(this._prefix(t),e);return this._parse(r)}write(t,e){const r=this._stringify(e);return GM_setValue(this._prefix(t),r)}delete(t){return GM_deleteValue(this._prefix(t))}readKeys(){return GM_listValues()}set(t,e){let r=this.read(t);return void 0!==r&&r?(this.write(t,e),!0):this.add(t,e)}add(t,e){let r=this.read(t,!1);if(void 0!==r&&r){if(this._isArray(r)){return-1===r.indexOf(e)&&(r.push(e),this.write(t,r),!0)}if(this._isObject(r)){let i,s=e;return i=Object.assign(r,s),this.write(t,i),!1}return!1}return this.write(t,e),!0}replace(t,e,r){let i=this.read(t,!1);if(void 0!==i&&i){if(this._isArray(i)){let s=i.indexOf(e);return-1!==s&&(i[s]=r,this.write(t,i),!0)}return!!this._isObject(i)&&(i[e]=r,this.write(t,i),!0)}return!1}remove(t,e){if(void 0===e)return this.delete(t),!0;{let r=this.read(t);if(void 0!==r&&r){if(this._isArray(r)){let i=r.indexOf(e);return-1!==i&&(r.splice(i,1),this.write(t,r),!0)}if(this._isObject(r)){return delete r[e],this.write(t,r),!0}return!1}return!0}}get(t,e){return this.read(t,e)}getAll(){const t=this._listKeys();let e={};for(let r=0,i=t.length;r<i;r++)e[t[r]]=this.read(t[r]);return e}getKeys(){return this._listKeys()}getPrefix(){return this.options.prefix}empty(){const t=this._listKeys();for(let e=0,r=t.lenght;e<r;e++)this.delete(t[e])}has(t){return null!==this.get(t)}forEach(t){const e=this.getAll();for(let r in e)t(r,e[r])}_parse(t){return this._isJson(t)?JSON.parse(t):t}_stringify(t){return this._isJson(t)?t:JSON.stringify(t)}_listKeys(t=!1){const e=this.readKeys();let r=[];if(t)return e;for(let t=0,i=e.length;t<i;t++)r[t]=this._unprefix(e[t]);return r}_prefix(t){return this.options.prefix+t}_unprefix(t){return t.substring(this.options.prefix.length)}_isJson(t){try{JSON.parse(t)}catch(t){return!1}return!0}_isObject(t){return!!t&&t.constructor===Object}_isArray(t){return!!t&&t.constructor===Array}}
//# sourceMappingURL=dist/src/plugins/Storage.min.js.map